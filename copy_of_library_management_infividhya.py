# -*- coding: utf-8 -*-
"""Copy of Library Management Infividhya.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JIsOniOykrfLj1BNvL1gEFF-2gRfqyux

# ***BOOK MANAGEMENT :***
"""

# Create a dataset for library management
import pandas as pd

# Creating a dictionary of lists
Library = {'Book_ID': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        'Book_Title': ['Rich Dad Poor Dad', 'House of Flame and Shadow', 'Bhagavad Geeta', '1984', 'The Lord of the Rings', 'Funny Story', 'The Fury', 'Atomic Habit', 'James', 'You Are Here'],
        'Author': ['Robert T. Kiyosaki', 'Sarah J. Maas', 'VYASA', 'George Orwell', 'J.R.R. Tolkien', 'Emily Henry', 'Alex Michaelides', 'James Clear', 'Percival Everett', 'David Nicholls'],
        'Genre': ['NON Fiction', 'Action-packed', 'Classic & NON Fiction', 'Dystopian', 'Fantasy', 'Domestic Fiction', 'Crime Fiction', 'Self-Help Book', 'Historical Fiction', 'Romance Novel'],
        'Available_Books': ['3', '2', '10', '1', '5', '2', '4', '1', '3', '7']}
# Creating a DataFrame from the dictionary
df = pd.DataFrame(Library)

# Add new books
new_book_id = int(input("Enter new Book ID: "))
new_book_title = input("Enter new Book Title : ")
new_author = input("Enter new Author name : ")
new_genre = input("Enter new Genre : ")
new_available_books = input("Enter new Available Books : ")

new_books = {'Book_ID': [new_book_id],
             'Book_Title': [new_book_title],
             'Author': [new_author],
             'Genre': [new_genre],
             'Available_Books': [new_available_books]}

df = pd.concat([df, pd.DataFrame(new_books)], ignore_index=True)
print(df)

# Update existing book information (e.g., title, author, quantity)

df.loc[df['Book_ID'] == 1, 'Book_Title'] = 'Rich Dad Poor Dad: 20th Anniversary Edition'
df.loc[df['Book_ID'] == 5, 'Available_Books'] = 6

print(df)

# Remove books from the inventory
df = df.drop(df[df['Book_ID'] == 11].index)
df = df.drop(df[df['Book_Title'] == 11].index)
df = df.drop(df[df['Author'] == 11].index)
df = df.drop(df[df['Genre'] == 11].index)
df = df.drop(df[df['Available_Books'] == 11].index)

print(df)

# Choosing books by genre

genre_choice = input("Enter the genre you're interested in: ")

# Filter DataFrame based on genre choice
filtered_df = df[df['Genre'] == genre_choice]

# Display available books in the chosen genre
if not filtered_df.empty:
  print("Here are the books available in the", genre_choice, "genre:")
  print(filtered_df)
else:
  print("No books found in the", genre_choice, "genre.")

"""# ***MEMBER MANAGEMENT :***"""

import pandas as pd

# Creating a Members list
Members = {'Member_ID': [1, 2, 3, 4, 5],
          'Member_Name': ['Rajveer Bhadoriya', 'Fenil Bhatti', 'Atif Sheikh', 'Abhay Sadhu', 'Raj Rajput '],
          'Contact_Details': ['1212', '2222', '3131', '1211', '3333']}

df = pd.DataFrame(Members)
print(df)

# Register new members

new_member_id = int(input("Enter new member ID: "))
new_member_name = input("Enter new member name: ")
new_member_contact = input("Enter new member contact details: ")

new_member = {'Member_ID': [new_member_id],
              'Member_Name': [new_member_name],
              'Contact_Details': [new_member_contact]}

df = pd.concat([df, pd.DataFrame(new_member)], ignore_index=True)
print(df)

# Update member information (e.g., name, contact details)

member_id_to_update = int(input("Enter the Member ID to update: "))
new_name = input("Enter the new name (leave blank to keep current): ")
new_contact = input("Enter the new contact details (leave blank to keep current): ")

if new_name:
  df.loc[df['Member_ID'] == member_id_to_update, 'Member_Name'] = new_name
if new_contact:
  df.loc[df['Member_ID'] == member_id_to_update, 'Contact_Details'] = new_contact

print(df)

# Remove members from the system

member_id_to_remove = int(input("Enter the Member ID to remove: "))
df = df.drop(df[df['Member_ID'] == member_id_to_remove].index)
print(df)

"""# ***LOAN MANAGEMENT :***"""

# Issue books to members

import pandas as pd
# Creating a Loans list
Loans = {'Loan_ID': [1, 2, 3],
         'Member_ID': [1, 2, 3],
         'Book_ID': [1, 2, 3],
         'Issue_Date': ['2024-07-01', '2024-07-02', '2024-07-04'],
         'Return_Date': ['2024-07-04', '2024-07-05', '2024-07-07']}

df_loans = pd.DataFrame(Loans)
print(df_loans)

# Issuing a new book
new_loan_id = int(input("Enter new loan ID: "))
new_member_id = int(input("Enter member ID: "))
new_book_id = int(input("Enter book ID: "))
new_issue_date = input("Enter issue date (YYYY-MM-DD): ")
new_return_date = input("Enter return date (YYYY-MM-DD): ")

new_loan = {'Loan_ID': [new_loan_id],
            'Member_ID': [new_member_id],
            'Book_ID': [new_book_id],
            'Issue_Date': [new_issue_date],
            'Return_Date': [new_return_date]}

df_loans = pd.concat([df_loans, pd.DataFrame(new_loan)], ignore_index=True)

print(df_loans)

# Applying charges if book not returned within return date it will be 30 rupees per day

import pandas as pd
from datetime import datetime, timedelta

# Issue books to members

# Creating a Loans list
Loans = {'Loan_ID': [1, 2, 3],
         'Member_ID': [1, 2, 3],
         'Book_ID': [1, 2, 3],
         'Issue_Date': ['2024-07-01', '2024-07-02', '2024-07-04'],
         'Return_Date': ['2024-07-04', '2024-07-05', '2024-07-07']}

df_loans = pd.DataFrame(Loans)
print(df_loans)

# Issuing a new book
new_loan_id = int(input("Enter new loan ID: "))
new_member_id = int(input("Enter member ID: "))
new_book_id = int(input("Enter book ID: "))
new_issue_date = input("Enter issue date (YYYY-MM-DD): ")
new_return_date = input("Enter return date (YYYY-MM-DD): ")

new_loan = {'Loan_ID': [new_loan_id],
            'Member_ID': [new_member_id],
            'Book_ID': [new_book_id],
            'Issue_Date': [new_issue_date],
            'Return_Date': [new_return_date]}

# Calculate and apply charges for overdue books
for index, row in df_loans.iterrows():
  return_date = datetime.strptime(row['Return_Date'], '%Y-%m-%d').date()
  if return_date < datetime.now().date():
    overdue_days = (datetime.now().date() - return_date).days
    charges = overdue_days * 30
    print(f"Book ID {row['Book_ID']} is overdue by {overdue_days} days. Charges: Rs. {charges}")
    print(f"Charges: Rs. {charges}")

df_loans = pd.concat([df_loans, pd.DataFrame(new_loan)], ignore_index=True)

print(df_loans)

"""# ***DATA HANDLING :***"""

import pandas as pd

Library = {'Book_ID': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        'Book_Title': ['Rich Dad Poor Dad', 'House of Flame and Shadow', 'Bhagavad Geeta', '1984', 'The Lord of the Rings', 'Funny Story', 'The Fury', 'Atomic Habit', 'James', 'You Are Here'],
        'Author': ['Robert T. Kiyosaki', 'Sarah J. Maas', 'VYASA', 'George Orwell', 'J.R.R. Tolkien', 'Emily Henry', 'Alex Michaelides', 'James Clear', 'Percival Everett', 'David Nicholls'],
        'Genre': ['NON Fiction', 'Action-packed', 'Classic & NON Fiction', 'Dystopian', 'Fantasy', 'Domestic Fiction', 'Crime Fiction', 'Self-Help Book', 'Historical Fiction', 'Romance Novel'],
        'Available_Books': ['3', '2', '10', '1', '5', '2', '4', '1', '3', '7']}

Members = {'Member_ID': [1, 2, 3, 4, 5],
          'Member_Name': ['Rajveer Bhadoriya', 'Fenil Bhatti', 'Atif Sheikh', 'Abhay Sadhu', 'Raj Rajput '],
          'Contact_Details': ['1212', '2222', '3131', '1211', '3333']}

# Store the data of Library and Members in csv
pd.DataFrame(Library).to_csv('Library_data.csv', index=False)
pd.DataFrame(Members).to_csv('Members_data.csv', index=False)

pd.read_csv('Library_data.csv')

pd.read_csv('Members_data.csv')

# Adding data in Library & Member information in csv file

import pandas as pd
import csv


Library = {'Book_ID': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        'Book_Title': ['Rich Dad Poor Dad', 'House of Flame and Shadow', 'Bhagavad Geeta', '1984', 'The Lord of the Rings', 'Funny Story', 'The Fury', 'Atomic Habit', 'James', 'You Are Here'],
        'Author': ['Robert T. Kiyosaki', 'Sarah J. Maas', 'VYASA', 'George Orwell', 'J.R.R. Tolkien', 'Emily Henry', 'Alex Michaelides', 'James Clear', 'Percival Everett', 'David Nicholls'],
        'Genre': ['NON Fiction', 'Action-packed', 'Classic & NON Fiction', 'Dystopian', 'Fantasy', 'Domestic Fiction', 'Crime Fiction', 'Self-Help Book', 'Historical Fiction', 'Romance Novel'],
        'Available_Books': ['3', '2', '10', '1', '5', '2', '4', '1', '3', '7']}

Members = {'Member_ID': [1, 2, 3, 4, 5],
          'Member_Name': ['Rajveer Bhadoriya', 'Fenil Bhatti', 'Atif Sheikh', 'Abhay Sadhu', 'Raj Rajput '],
          'Contact_Details': ['1212', '2222', '3131', '1211', '3333']}



def add_book_data():
  with open('Library_data.csv', 'a', newline='') as file:
    writer = csv.writer(file)
    book_id = int(input("Enter new Book ID: "))
    book_title = input("Enter new Book Title: ")
    author = input("Enter new Author name: ")
    genre = input("Enter new Genre: ")
    available_books = input("Enter new Available Books: ")
    writer.writerow([book_id, book_title, author, genre, available_books])
  print("Book data added successfully!")

def add_member_data():
  with open('Members_data.csv', 'a', newline='') as file:
    writer = csv.writer(file)
    member_id = int(input("Enter new Member ID: "))
    member_name = input("Enter new Member Name: ")
    contact_details = input("Enter new Contact Details: ")
    writer.writerow([member_id, member_name, contact_details])
  print("Member data added successfully!")

df = pd.DataFrame(Library).to_csv('Library_data.csv', index=False)
df = pd.DataFrame(Members).to_csv('Members_data.csv', index=False)

while True:
  choice = input("What data do you want to add? (book/member/exit): ")
  if choice.lower() == 'book':
    add_book_data()
  elif choice.lower() == 'member':
    add_member_data()
  elif choice.lower() == 'exit':
    break
  else:
    print("Invalid choice. Please enter 'book', 'member', or 'exit'.")

import pandas as pd

df = pd.read_csv('Library_data.csv', index_col=[0])

pd.read_csv('Library_data.csv')

pd.read_csv('Members_data.csv')

# Data manipulation (e.g., filtering, sorting)

# Filtering: Display books by a specific author
author_name = input("Enter author name to filter by: ")
filtered_books = df[df['Author'] == author_name]
if not filtered_books.empty:
  print(filtered_books)
else:
  print(f"No books found by author: {author_name}")

# Sorting: Sort books by available quantity in descending order
sorted_books = df.sort_values(by='Available_Books', ascending=False)
print("\nBooks sorted by available quantity (descending):")
print(sorted_books)

